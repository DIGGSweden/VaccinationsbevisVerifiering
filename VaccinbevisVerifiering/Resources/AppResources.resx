<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HeaderText" xml:space="preserve">
    <value>Vaccination certificate</value>
  </data>
  <data name="InformationHeader" xml:space="preserve">
    <value>Verifier</value>
  </data>
  <data name="InformationText" xml:space="preserve">
    <value>Here you can validate a vaccination certificate by scanning it with the camera</value>
  </data>
  <data name="ScanButtonText" xml:space="preserve">
    <value>Scan</value>
  </data>
  <data name="ScanAgainButtonText" xml:space="preserve">
    <value>Validate next</value>
  </data>
  <data name="LinkText" xml:space="preserve">
    <value>How to use Vaccination certificate Verifier</value>
  </data>
  <data name="ScanTopText" xml:space="preserve">
    <value>Scan certificate</value>
  </data>
  <data name="ScanBottomText" xml:space="preserve">
    <value />
  </data>
  <data name="ScanFlashText" xml:space="preserve">
    <value>Flash</value>
  </data>
  <data name="ScanCancelText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="IssuedDateLabel" xml:space="preserve">
    <value>Issued: </value>
  </data>
  <data name="ExpireDateLabel" xml:space="preserve">
    <value>Expire: </value>
  </data>
  <data name="VaccinatedText" xml:space="preserve">
    <value>Fully vaccinated</value>
  </data>
  <data name="NotFullyVaccinatedText" xml:space="preserve">
    <value>Not fully vaccinated</value>
  </data>
  <data name="TestedText" xml:space="preserve">
    <value>Tested</value>
  </data>
  <data name="RecoveredText" xml:space="preserve">
    <value>Recovered</value>
  </data>
  <data name="MissingDataText" xml:space="preserve">
    <value>No information</value>
  </data>
  <data name="ErrorReadingText" xml:space="preserve">
    <value>Error while reading</value>
  </data>
  <data name="ApprovedHeader" xml:space="preserve">
    <value>Valid</value>
  </data>
  <data name="NotApprovedHeader" xml:space="preserve">
    <value>Not valid</value>
  </data>
  <data name="AppVersion" xml:space="preserve">
    <value>Version: </value>
  </data>
  <data name="KeyVersion" xml:space="preserve">
    <value>Keys retrived: </value>
  </data>
  <data name="ValidationRulesVersion" xml:space="preserve">
    <value>Validarion rule version: </value>
  </data>
  <data name="InvalidSigningCertificate" xml:space="preserve">
    <value>Invalid signing certificate</value>
  </data>
  <data name="NoSigningCertifcateCouldBeFound" xml:space="preserve">
    <value>No signing certificate could be found</value>
  </data>
  <data name="DCCExpired" xml:space="preserve">
    <value>Vaccination certificate expired</value>
  </data>
  <data name="UnvalidCode" xml:space="preserve">
    <value>Unvalid QR code</value>
  </data>
  <data name="NotApprovedDaysSinceLastDose" xml:space="preserve">
    <value>Less than 14 days since last dose</value>
  </data>
  <data name="NotApprovedNoOfDoses" xml:space="preserve">
    <value>Not fully vaccinated</value>
  </data>
  <data name="NotApprovedVaccine" xml:space="preserve">
    <value>Not valid vaccination</value>
  </data>
  <data name="NoPublicKeys" xml:space="preserve">
    <value>No public keys</value>
  </data>
  <data name="OldPublicKeys" xml:space="preserve">
    <value>Public keys are old</value>
  </data>
  <data name="UpdatePublicKeys" xml:space="preserve">
    <value>Public keys needs to be updated</value>
  </data>
  <data name="FirstnameLabel" xml:space="preserve">
    <value>First name: </value>
  </data>
  <data name="FamilynameLabel" xml:space="preserve">
    <value>Family name: </value>
  </data>
  <data name="TranNameLabel" xml:space="preserve">
    <value>Transliterated name: </value>
  </data>
  <data name="BirthDateLabel" xml:space="preserve">
    <value>Birth date: </value>
  </data>
  <data name="DiseaseLabel" xml:space="preserve">
    <value>Disease: </value>
  </data>
  <data name="CountryLabel" xml:space="preserve">
    <value>Country: </value>
  </data>
  <data name="IssuerLabel" xml:space="preserve">
    <value>Issuer: </value>
  </data>
  <data name="CertificateIdentifierLabel" xml:space="preserve">
    <value>Identifier: </value>
  </data>
  <data name="TestHeader" xml:space="preserve">
    <value>Tested</value>
  </data>
  <data name="TestTypeLabel" xml:space="preserve">
    <value>Test type: </value>
  </data>
  <data name="TestNameLabel" xml:space="preserve">
    <value>Test name: </value>
  </data>
  <data name="TestManifacturerLabel" xml:space="preserve">
    <value>Test manifacturer: </value>
  </data>
  <data name="TestSampleOriginLabel" xml:space="preserve">
    <value>Sample origin: </value>
  </data>
  <data name="TestResultLabel" xml:space="preserve">
    <value>Test result: </value>
  </data>
  <data name="TestingCentreLabel" xml:space="preserve">
    <value>Test centre: </value>
  </data>
  <data name="TestDateLabel" xml:space="preserve">
    <value>Test date: </value>
  </data>
  <data name="TestResultDateLabel" xml:space="preserve">
    <value>Result date: </value>
  </data>
  <data name="ValidFromLabel" xml:space="preserve">
    <value>Valid from: </value>
  </data>
  <data name="ValidUntilLabel" xml:space="preserve">
    <value>Valid until: </value>
  </data>
  <data name="RecoveryHeader" xml:space="preserve">
    <value>Recovered</value>
  </data>
  <data name="RecTestDateLabel" xml:space="preserve">
    <value>Positive date: </value>
  </data>
  <data name="VaccinationHeader" xml:space="preserve">
    <value>Vaccination</value>
  </data>
  <data name="DoseText" xml:space="preserve">
    <value>Dose </value>
  </data>
  <data name="VaccineDescriptionLabel" xml:space="preserve">
    <value>Description: </value>
  </data>
  <data name="VaccineNameLabel" xml:space="preserve">
    <value>Name: </value>
  </data>
  <data name="VaccineAuthLabel" xml:space="preserve">
    <value>Auth holder: </value>
  </data>
  <data name="VaccineLotLabel" xml:space="preserve">
    <value>Batch: </value>
  </data>
  <data name="VaccinationDateLabel" xml:space="preserve">
    <value>Date: </value>
  </data>
  <data name="VaccinationProviderLabel" xml:space="preserve">
    <value>Responsible: </value>
  </data>
  <data name="FAQ" xml:space="preserve">
    <value>FAQ</value>
  </data>
  <data name="AboutHeaderText" xml:space="preserve">
    <value>About this app</value>
  </data>
  <data name="AboutText" xml:space="preserve">
    <value>Sweden's public verification app for vaccination certificates, developed by the Agency for Digital Government (DIGG)</value>
  </data>
  <data name="SettingsText" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ProductionText" xml:space="preserve">
    <value>Production</value>
  </data>
  <data name="RefreshText" xml:space="preserve">
    <value>Refresh trust list</value>
  </data>
  <data name="VerificationText" xml:space="preserve">
    <value>Verification</value>
  </data>
  <data name="NoVerificationText" xml:space="preserve">
    <value>No verification</value>
  </data>
  <data name="PrivacyPolicyLink" xml:space="preserve">
    <value>Privacy policy</value>
  </data>
  <data name="AboutViewCancelButtonText" xml:space="preserve">
    <value>Cancel button</value>
  </data>
  <data name="AboutViewLogotypeText" xml:space="preserve">
    <value>DIGG logotype</value>
  </data>
  <data name="MainViewImageText" xml:space="preserve">
    <value>Picture of a mobile device with a QR code</value>
  </data>
  <data name="MainViewInfoButtonText" xml:space="preserve">
    <value>Info button</value>
  </data>
  <data name="ResultViewFailedImageText" xml:space="preserve">
    <value>Not valid icon</value>
  </data>
  <data name="ResultViewValidImageText" xml:space="preserve">
    <value>Valid icon</value>
  </data>
  <data name="ForgedCovidCertficate" xml:space="preserve">
    <value>Forged covid certificate</value>
  </data>  
  <data name="KeyModalErrorMessage" xml:space="preserve">
    <value>Connect the app to internet and the keys will be downloaded automatically</value>
  </data>
</root>